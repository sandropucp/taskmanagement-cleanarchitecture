name: "Step - Deploy"

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      artifact_name:
        required: true
        type: string
      sql_artifact_name:
        required: true
        type: string
      resource_group_name:
        required: true
        type: string
      app_service_name:
        required: true
        type: string
      app_service_slot_name:
        required: true
        type: string
    secrets:
      azure_client_id:
        required: true
        description: "58a37099-30ca-4a9b-af90-ca5622192538"
      azure_subscription_id:
        required: true
        description: "81fad219-5471-431a-b6f5-6d6d1c4610d9"
      azure_tenant_id:
        required: true
        description: "0ad39047-c378-4fe8-bbc0-4de4003a34c1"

jobs:
  deploy:
    name: Deploy ${{ inputs.env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    steps:
      - uses: actions/checkout@v4

        # Download the artifact in folder publish
      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: publish

        # Download the sql artifact in folder ddl-updates
      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.sql_artifact_name }}
          path: ddl-updates

        # Azure Login  
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.azure_client_id }}
          tenant-id: ${{ secrets.azure_tenant_id }}
          subscription-id: ${{ secrets.azure_subscription_id }}

        # Run Bicep to create resources (service plan and web app)  
      - name: Run Bicep
        run: |
          az deployment group create \
            --name ${{ inputs.env }}-deployment-${{ github.run_number }} \
            --template-file infrastructure/main.bicep \
            --parameters infrastructure/environments/${{ inputs.env }}.bicepparam \
            --resource-group ${{ inputs.resource_group_name }} \
            --verbose

        # Deploy Web App to Azure App Service    
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.app_service_name }}
          slot-name: ${{ inputs.app_service_slot_name }}
          package: publish/

        # Swap slots  
      - name: Swap slots
        run: |
          az webapp deployment slot swap -g ${{ inputs.resource_group_name }} -n ${{ inputs.app_service_name }} --slot ${{ inputs.app_service_slot_name }} --target-slot production --verbose

        # Deploy SQL Script to Azure SQL Database  
      - name: Azure SQL Deploy
        uses: Azure/sql-action@v2
        with:
          connection-string: ${{ secrets.SQL_CONNECTION_STRING }} # The connection string, including authentication information, for the Azure SQL Server database.
          path: ddl-updates/sql-script.sql # Path to the file used for this action. Supported file types are .sql, .dacpac, or .sqlproj.
